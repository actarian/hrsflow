!function a(s,r,l){function c(t,e){if(!r[t]){if(!s[t]){var i="function"==typeof require&&require;if(!e&&i)return i(t,!0);if(u)return u(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var o=r[t]={exports:{}};s[t][0].call(o.exports,function(e){return c(s[t][1][e]||e)},o,o.exports,a,s,r,l)}return r[t].exports}for(var u="function"==typeof require&&require,e=0;e<l.length;e++)c(l[e]);return c}({1:[function(e,t,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0;var y=n(e("./shared/dom")),m=n(e("./shared/follower")),c=n(e("./shared/rect")),w=n(e("./shared/triangles")),o=n(e("./shared/utils")),g=n(e("./shared/video"));function n(e){return e&&e.__esModule?e:{default:e}}function a(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var b=1,s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,i,n;return t=e,(i=[{key:"init",value:function(){var e=document.querySelector("body");b=e.classList.contains("fixed")?0:1;var t=document.querySelector(".page");y.default.detect(e);var i=new Swiper(".swiper-container--home-hero",{loop:!0,parallax:!0,spaceBetween:0,speed:600,autoplay:{delay:5e3,disableOnInteraction:!0},on:{init:function(){this.el.classList.add("ready")},slideChangeTransitionEnd:function(){var e=this.slides[this.activeIndex];if(e)e.querySelector("video")}}}),n=new Swiper(".swiper-container--hilights",{loop:!1,parallax:!0,spaceBetween:300,speed:600,pagination:{el:".swiper-pagination",clickable:!0,dynamicBullets:!0},on:{init:function(){this.el.classList.add("ready")}}}),o=[i,n,new Swiper(".swiper-container--gallery",{loop:!1,slidesPerView:"auto",spaceBetween:45,speed:600,pagination:{el:".swiper-pagination",clickable:!0,dynamicBullets:!0},on:{init:function(){this.el.classList.add("ready")}}}),new Swiper(".swiper-container--media",{loop:!0,slidesPerView:1,spaceBetween:0,speed:600,simulateTouch:!1,pagination:{el:".swiper-pagination",clickable:!0},on:{init:function(){this.el.classList.add("ready")}}})].filter(function(e){return void 0!==e.el}),a=[].slice.call(document.querySelectorAll("video[playsinline]")).map(function(e,t){var i=new g.default(e);return i.i=t,i}),s=[].slice.call(document.querySelectorAll(".triangles")).map(function(e,t){var i=new w.default(e);return i.i=t,i}),r=[].slice.call(document.querySelectorAll("[data-parallax]")),l=[].slice.call(document.querySelectorAll("[data-shadow]")),c=[].slice.call(document.querySelectorAll("[data-appear]"));c.forEach(function(e){for(var t=e.parentNode,i=e;i;)(i=i.parentNode)&&i.classList&&i.classList.contains("section")&&(t=i,i=null);e.appearingIndex=[].slice.call(t.querySelectorAll("[data-appear]")).indexOf(e)});var u=new m.default(document.querySelector(".follower")),d=[].slice.call(document.querySelectorAll('[href="#"]')),h=[].slice.call(document.querySelectorAll(".btn, .nav:not(.nav--service)>li>a")),f=[].slice.call(document.querySelectorAll("[toggle]")),p=[].slice.call(document.querySelectorAll("[sticky]"));p.forEach(function(e){return e.content=e.querySelector("[sticky-content]")});var v=new TimelineMax;u.enabled&&e.classList.add("follower-enabled"),this.body=e,this.page=t,this.swiperHero=i,this.swiperHilights=n,this.swipers=o,this.videos=a,this.triangles=s,this.parallaxes=r,this.shadows=l,this.appears=c,this.stickys=p,this.follower=u,this.hrefs=d,this.links=h,this.togglers=f,this.mouse={x:0,y:0},this.timeline=v,this.onResize(),this.addListeners(),e.classList.add("ready")}},{key:"addListeners",value:function(){window.addEventListener("resize",function(){r.onResize()}),window.addEventListener("scroll",o.default.throttle(function(){r.onScroll()},40)),window.addEventListener("wheel",function(e){r.onWheel(e)}),document.addEventListener("mousemove",function(e){r.onMouseMove(e)}),this.hrefs.forEach(function(e){e.addEventListener("click",function(e){e.preventDefault(),e.stopPropagation()})}),this.togglers.forEach(function(n){n.addEventListener("click",function(e){var t=n.getAttribute("toggle");t=t?document.querySelector(t):n;var i=n.getAttribute("toggle-class")||"active";t.classList.contains(i)?t.classList.remove(i):t.classList.add(i),e.stopPropagation()})})}},{key:"onMouseMove",value:function(e){this.mouse.x=e.clientX/window.innerWidth-.5,this.mouse.y=e.clientY/window.innerHeight-.5,this.follower.enabled&&(this.follower.follow(this.links.map(function(e){return c.default.fromNode(e)})),this.follower.move({x:e.clientX,y:e.clientY}))}},{key:"onResize",value:function(){this.windowRect=new c.default({top:0,left:0,width:window.innerWidth,height:window.innerHeight}),this.triangles.forEach(function(e){e.resize()})}},{key:"onScroll",value:function(e){var t=y.default.scrollTop();if(y.default.fastscroll){var i=Math.round(10*t)/10;this.page.previousTop!==i?(this.page.previousTop=i,y.default.scrolling=!0,i>this.page.previousTop?(this.body.classList.add("scroll-up"),this.body.classList.remove("scroll-down")):(this.body.classList.remove("scroll-up"),this.body.classList.add("scroll-down"))):y.default.scrolling=!1}80<t?this.body.classList.add("fixed"):1===b&&this.body.classList.remove("fixed")}},{key:"onWheel",value:function(e){0<e.deltaY?(this.body.classList.add("scroll-up"),this.body.classList.remove("scroll-down")):(this.body.classList.remove("scroll-up"),this.body.classList.add("scroll-down"))}},{key:"render",value:function(){var l=this;if(y.default.fastscroll)this.body.hasAttribute("style")&&(this.body.removeAttribute("style"),this.page.removeAttribute("style"));else{this.body.offsetHeight!==this.page.offsetHeight&&this.body.setAttribute("style","height: ".concat(this.page.offsetHeight,"px;"));var e=y.default.scrollTop(),t=this.page.previousTop||0;t+=(e-t)/5,Math.abs(e-t)<.15&&(t=e),void 0===t||Number.isNaN(t)||this.page.previousTop===t?y.default.scrolling=!1:(this.page.previousTop=t,this.page.setAttribute("style","transform: translateY(".concat(-t,"px);")),y.default.scrolling=!0)}this.swipers.forEach(function(e,t){if(e.params.autoplay.enabled&&!e.params.autoplay.disableOnInteraction){var i=e.el;0<c.default.fromNode(i).intersection(l.windowRect).y?e.autoplay.running||e.autoplay.start():e.autoplay.running&&e.autoplay.stop()}}),this.videos.forEach(function(e,t){var i=e.node,n=c.default.fromNode(i).intersection(l.windowRect);0<n.y&&0<n.x?e.appear():e.disappear()}),y.default.mobile||(this.triangles.forEach(function(e,t){var i=e.node;0<c.default.fromNode(i).intersection(l.windowRect).y?e.appear():e.disappear()}),this.parallaxes.forEach(function(e,t){var i=e.parallax||2*(e.parallax=parseInt(e.getAttribute("data-parallax"))||5),n=t%2==0?1:-1,o=e.currentY||0,a=c.default.fromNode(e),s=(a=new c.default({top:a.top,left:a.left,width:a.width,height:a.height})).intersection(l.windowRect);if(0<s.y){var r=(100+2*i)/100;o=(Math.min(1,Math.max(-1,s.center.y))*i*n-50).toFixed(3),e.currentY!==o&&(e.currentY=o,e.parentNode.classList.contains("background")?e.setAttribute("style","top: 50%; left: 50%; transform: translateX(-50%) translateY(".concat(o,"%) scale3d(").concat(r,",").concat(r,",1.0);")):e.setAttribute("style","top: 50%; left: 50%; transform: translateX(-50%) translateY(".concat(o,"%);")))}}),this.follower.enabled&&this.follower.render()),this.appears.forEach(function(e,t){0<c.default.fromNode(e).intersection(l.windowRect).y?e.to||(e.to=setTimeout(function(){e.classList.add("appeared")},150*e.appearingIndex)):e.classList.contains("appeared")&&(e.to=null,e.classList.remove("appeared"))}),this.stickys.forEach(function(e,t){var i=parseInt(e.getAttribute("sticky"))||0,n=c.default.fromNode(e),o=e.offsetHeight-e.content.offsetHeight;30<n.left?(i=Math.max(0,Math.min(o,i-n.top)),e.content.setAttribute("style","transform: translateY(".concat(i,"px);"))):e.content.setAttribute("style","transform: none;")})}},{key:"loop",value:function(){var e=this;this.render(),this.playing&&window.requestAnimationFrame(function(){e.loop()})}},{key:"play",value:function(){this.playing=!0,this.loop()}},{key:"pause",value:function(){this.playing=!1}}])&&a(t.prototype,i),n&&a(t,n),e}(),r=new(i.default=s);window.onload=function(){r.init(),r.play()}},{"./shared/dom":2,"./shared/follower":3,"./shared/rect":4,"./shared/triangles":6,"./shared/utils":7,"./shared/video":8}],2:[function(e,t,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0;var n,p=(n=e("./utils"))&&n.__esModule?n:{default:n};function o(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=function(){function f(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f)}var e,t,i;return e=f,i=[{key:"detect",value:function(n){var e=navigator.userAgent.toLowerCase(),t=-1<e.indexOf("msie"),i=-1<e.indexOf("firefox"),o=-1<e.toLowerCase().indexOf("op"),a=-1<e.indexOf("chrome"),s=-1<e.indexOf("safari");a&&s&&(s=!1),a&&o&&(a=!1);var r=e.match(/android/i),l=e.match(/blackberry/i),c=e.match(/iphone|ipad|ipod/i),u=e.match(/opera mini/i),d=e.match(/iemobile/i)||navigator.userAgent.match(/wpdesktop/i),h={chrome:a,explorer:t,firefox:i,safari:s,opera:o,android:r,blackberry:l,ios:c,operamini:u,iemobile:d,mobile:r||l||c||u||d,overscroll:"MacIntel"===navigator.platform&&"function"==typeof navigator.getBattery};Object.assign(f,h),Object.keys(h).forEach(function(e){h[e]&&n.classList.add(e)});document.addEventListener("touchstart",function e(){document.removeEventListener("touchstart",e),f.touch=!0,n.classList.add("touch")});document.addEventListener("mousedown",function e(){document.removeEventListener("mousedown",e),f.mouse=!0,n.classList.add("mouse")});document.addEventListener("scroll",function e(){var t=p.default.now();if(f.lastScrollTime){var i=t-f.lastScrollTime;i<5&&(document.removeEventListener("scroll",e),f.fastscroll=!0,n.classList.add("fastscroll"),console.log("scroll",i))}f.lastScrollTime=t})}},{key:"fragmentFirstElement",value:function(e){return Array.prototype.slice.call(e.children).find(function(e){return e.nodeType===Node.ELEMENT_NODE})}},{key:"fragmentFromHTML",value:function(e){return document.createRange().createContextualFragment(e)}},{key:"scrollTop",value:function(){return document&&document.defaultView?document.defaultView.pageYOffset:0}}],(t=null)&&o(e.prototype,t),i&&o(e,i),f}();i.default=a},{"./utils":7}],3:[function(e,t,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0;var n,o=(n=e("./utils"))&&n.__esModule?n:{default:n};function a(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function i(e){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),this.enabled=!1,this.node=e,this.div1=e.querySelectorAll("div")[0],this.div2=e.querySelectorAll("div")[1],this.x=0,this.y=0,this.x2=0,this.y2=0,this.w=20,this.h=20,this.r=10,this.s=0,this.o=0,this.mouse={x:0,y:0},this.rects=[],this.magnet=null,this.setMagnetThrottled=o.default.throttle(function(){return t.setMagnet()},100)}var e,t,n;return e=i,(t=[{key:"follow",value:function(e){this.rects=e}},{key:"move",value:function(e){this.mouse=e}},{key:"setMagnet",value:function(){var i=this,e=this.rects.reduce(function(e,t){return t.contains(i.mouse.x,i.mouse.y)?{match:!0,x:i.mouse.x,y:i.mouse.y,width:20,height:20,radius:0,scale:1,opacity:.05}:e},{match:!1,x:this.mouse.x,y:this.mouse.y,width:20,height:20,radius:75,scale:.25,opacity:.15});this.magnet=e}},{key:"render",value:function(){if(1024<=window.innerWidth&&this.mouse.x&&this.mouse.y){this.setMagnetThrottled();var e=this.magnet;this.x+=(e.x-this.x)/8,this.y+=(e.y-this.y)/8,this.w+=(e.width-this.w)/8,this.h+=(e.height-this.h)/8,this.r+=(e.radius-this.r)/8,this.s+=(e.scale-this.s)/8,this.o+=(e.opacity-this.o)/8,this.x2+=(this.mouse.x-this.x2)/2,this.y2+=(this.mouse.y-this.y2)/2,this.div1.setAttribute("style","opacity: ".concat(this.o,"; left:").concat(this.x-50*this.s,"px; top:").concat(this.y-50*this.s,"px; width:").concat(100*this.s,"px; height:").concat(100*this.s,"px;")),this.div2.setAttribute("style","opacity: 1; left:".concat(this.x2-2,"px; top:").concat(this.y2-2,"px;"))}else this.div1.setAttribute("style","opacity: 0;"),this.div2.setAttribute("style","opacity: 0;")}}])&&a(e.prototype,t),n&&a(e,n),i}();i.default=s},{"./utils":7}],4:[function(e,t,i){"use strict";function o(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0;var n=function(){function i(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.set(e)}var e,t,n;return e=i,n=[{key:"contains",value:function(e,t,i){return e.top<=i&&i<=e.bottom&&e.left<=t&&t<=e.right}},{key:"intersectRect",value:function(e,t){return!(t.left>e.right||t.right<e.left||t.top>e.bottom||t.bottom<e.top)}},{key:"fromNode",value:function(e){if(!e.getClientRects().length)return new i;var t=e.getBoundingClientRect();return new i({top:t.top,left:t.left,width:t.width,height:t.height})}}],(t=[{key:"set",value:function(e){e&&(Object.assign(this,e),this.right=this.left+this.width,this.bottom=this.top+this.height),this.center={top:this.top+this.height/2,left:this.left+this.width/2},this.center.x=this.center.left,this.center.y=this.center.top}},{key:"contains",value:function(e,t){return i.contains(this,e,t)}},{key:"intersect",value:function(e){return i.intersectRect(this,e)}},{key:"intersection",value:function(e){var t={x:(this.center.x-e.center.x)/(e.width/2),y:(this.center.y-e.center.y)/(e.height/2)};if(this.intersect(e)){var i=this.left>e.left?0:Math.abs(e.left-this.left),n=this.top>e.top?0:Math.abs(e.top-this.top),o=i?1-i/this.width:(e.left+e.width-this.left)/this.width,a=n?1-n/this.height:(e.top+e.height-this.top)/this.height;return{x:o=Math.min(1,o),y:a=Math.min(1,a),center:t}}return{x:0,y:0,center:t}}}])&&o(e.prototype,t),n&&o(e,n),i}();i.default=n},{}],5:[function(e,t,i){"use strict";function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0;var o=function(){function a(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var t=document.createElementNS("http://www.w3.org/2000/svg","svg"),i=document.createElementNS("http://www.w3.org/2000/svg","use"),n=Math.random()<.5?60:120,o="triangle-"+n+(Math.random()<.15?"-fill":"")+(e?"-white":"");t.appendChild(i),t.setAttribute("class","triangle triangle--"+n),i.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","#"+o),i.setAttribute("width",n),i.setAttribute("height",n),this.node=t}var e,t,i;return e=a,(t=[{key:"getRandomPosition",value:function(e){var t=e.offsetWidth,i=e.offsetHeight,n=90*Math.floor(4*Math.random()),o=Math.floor(Math.random()*t/59),a=Math.floor(Math.random()*i/59);return{r:n,x:59*o,y:59*a,i:30*a+o}}},{key:"appendInto",value:function(e,t){e.appendChild(this.node),this.parent=e,this.resize(e,t)}},{key:"resize",value:function(e,t){for(var i=window.innerWidth/2-e.offsetLeft,n=this.getRandomPosition(e),o=0;(void 0!==t[n.i]||n.x>i-118&&n.x<i+118)&&o<5;)n=this.getRandomPosition(e),o++;t[n.i]=n.i,this.position=n,this.parent=e,this.node.setAttribute("style","opacity: 0; top: ".concat(n.y,"px; left: ").concat(n.x,"px; transform: rotate(").concat(n.r,"deg);"))}},{key:"appear",value:function(){var e=this.position;TweenMax.to(this.node,1,{opacity:1,onComplete:function(){},onCompleteScope:this,ease:Quint.easeInOut,overwrite:"all",delay:.02*e.i})}},{key:"rotate",value:function(){var e=this,t=this.position,i=t.x/59-1;t.x=59*i,TweenMax.to(this.node,1,{x:t.x+"%",directionalRotation:"90_cw",onComplete:function(){e.disappear()},onCompleteScope:this,ease:Quint.easeInOut,overwrite:"all",delay:3+Math.floor(10*Math.random())})}},{key:"disappear",value:function(){var t=this;TweenMax.to(this.node,1,{opacity:0,onComplete:function(){var e=t.getRandomPosition(t.parent);t.position=e,t.node.setAttribute("style","opacity:0; top: ".concat(e.y,"px; left: ").concat(e.x,"px; transform: rotate(").concat(e.r,"deg);")),t.appear()},onCompleteScope:this,ease:Quint.easeInOut,overwrite:"all"})}},{key:"kill",value:function(){TweenMax.killTweensOf(this.node)}}])&&n(e.prototype,t),i&&n(e,i),a}();i.default=o},{}],6:[function(e,t,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0;var n,o=(n=e("./triangle"))&&n.__esModule?n:{default:n};function a(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function n(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);var e=new Array(20).fill(null).map(function(){return new o.default(t.hasAttribute("white"))});this.node=t,this.triangles=e;var i={};e.forEach(function(e){e.appendInto(t,i)})}var e,t,i;return e=n,(t=[{key:"resize",value:function(){var t=this,i=this.node,n={};this.triangles.forEach(function(e){e.resize(i,n),t.visible&&e.appear()})}},{key:"appear",value:function(){this.visible||(this.visible=!0,this.triangles.forEach(function(e){e.appear()}))}},{key:"disappear",value:function(){this.visible&&(this.visible=!1,this.triangles.forEach(function(e){e.kill()}))}}])&&a(e.prototype,t),i&&a(e,i),n}();i.default=s},{"./triangle":5}],7:[function(e,t,i){"use strict";function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0;var o=function(){function d(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d)}var e,t,i;return e=d,i=[{key:"now",value:function(){return Date.now?Date.now():(new Date).getTime()}},{key:"performanceNow",value:function(){return performance?performance.timing.navigationStart+performance.now():d.now()}},{key:"throttle",value:function(i,n,o){var a=null,s=null,r=null,l=null,c=0;o||(o={});var u=function(){c=!1===o.leading?0:d.now(),l=null,s=i.apply(a,r),l||(a=r=null)};return function(){a=this,r=arguments;var e=d.now();c||!1!==o.leading||(c=e);var t=n-(e-c);return t<=0||n<t?(l&&(clearTimeout(l),l=null),c=e,s=i.apply(a,r),l||(a=r=null)):l||!1===o.trailing||(l=setTimeout(u,t)),s}}},{key:"debounce",value:function(n){var o,a=this,s=arguments,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:10,l=!(2<arguments.length&&void 0!==arguments[2])||arguments[2];return function(){var e=a,t=s,i=l&&!o;o&&clearTimeout(o),o=setTimeout(function(){o=null,l||n.apply(e,t)},r),i&&n.apply(e,t)}}}],(t=null)&&n(e.prototype,t),i&&n(e,i),d}();i.default=o},{}],8:[function(e,t,i){"use strict";function o(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0;var n=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.node=e,this.addListeners()}var e,i,n;return e=t,(i=[{key:"addListeners",value:function(){var e=this;this.node.addEventListener("click",function(){e.paused?(e.paused=!1,e.appear(),e.node.parentNode.classList.add("onplay"),setTimeout(function(){e.node.parentNode.classList.remove("onplay")},1500)):(e.paused=!0,e.disappear(),e.node.parentNode.classList.add("onpause"),setTimeout(function(){e.node.parentNode.classList.remove("onpause")},1500))})}},{key:"appear",value:function(){this.visible||this.paused||(this.visible=!0,this.node.play())}},{key:"disappear",value:function(){this.visible&&(this.visible=!1,console.log(this.node),this.node.pause(),console.log("video.disappear"))}}])&&o(e.prototype,i),n&&o(e,n),t}();i.default=n},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,